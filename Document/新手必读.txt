这里不会放什么冗余的文字，关于系统的设计会尽量都在源码里反应出来。
每个软件工程都有自己的设计思想和规范，这里记录的就只是这些要遵循的规范。


1)怎么调试
LOG();
网络断点:
逻辑断点:

2)对象创建和释放
如果你需要用到构造或者析构，除了C++默认的构造和析构函数外，必须自定义有对应的Init(),Release()。如果构造有带参数，请在外部手动调用Init(Param1,Param2).实例代码如下
class T
{
public:
  T()
  {
     Init();
  }

  ~T()
  {
     Release();
  }
}
3)静态初始化Init，如果遇到错误,调用统一的宏INITASSERT();MTASSERT()
debug版本下两者都会弹窗，记录日志
release下，INITASSERT仍然弹窗(启动时需要即时解决);
           MTASSERT只返回false,记录日志

Init()
{
   INITASSERT(i>0);
}

fun1()
{
   MTASSERT(i>0)
   {
      //这里自己仍然需要日志记录详细信息。打一条ASSERT没什么用
      LOG()....
      return;
   }
}
4)返回值。小于等于-1表示失败，大于等于0表示成功。
5)__try...__except.  保证程序不当，打出异常的堆栈。尽量不依赖异常做释放、不使用finally、等。绝不和break.return.continue
等关键字合用
6)命名规则：采用MFC那套规则，表示对象的时候要注意，在前面几个缩写中表示类型。比如网络包处理对象:pPOject,如果后面有长的则pPOXxxxx








